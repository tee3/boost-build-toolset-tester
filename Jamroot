import os ;
import testing ;

# configure a toolset and add it to the list of toolsets to test
rule add-toolset ( name : version ? : path ? )
{
  local versioned-name = $(name) ;
  if $(version)
  {
    versioned-name = $(name)-$(version) ;
  }

  toolset-choices += $(versioned-name) ;
  using $(name) : $(version) : $(path) ;
}

# generate a list of toolsets to test
local toolset-choices = ;

if [ os.name ] = NT
{
  add-toolset msvc ;
}
else if [ os.name ] = CYGWIN
{
  add-toolset gcc ;
}
else if [ os.name ] = LINUX
{
  add-toolset gcc ;
}
else if [ os.name ] = MACOSX
{
  add-toolset darwin ;
}

echo "building for the following toolsets:" ;
for local t in $(toolset-choices)
{
  echo "   * $(t)" ;
}

# NOTE: comment out lines below to disable features
link-choices = shared static ;
#runtime-link-choices = shared static ;
#runtime-debugging-choices = on off ;
optimization-choices = off speed space ;
profiling-choices = off on ;
inlining-choices = off on full ;
threading-choices = single multi ;
rtti-choices = off on ;
exception-handling-choices = off on ;

#asynch-exceptions-choices = off on ;

#extern-c-nothrow-choices = off on ;

debug-symbols-choices = on off ;

strip-choices = off on ;
define-choices = DEFINE0 DEFINE1 ;
undef-choices = UNDEF0 UNDEF1 ;
include-choices = include0 include1 ;
warnings-choices = off on ;
warnings-as-errors-choices = off on ;

options =
  <toolset>$(toolset-choices)
  <link>$(link-choices)
  <runtime-link>$(runtime-link-choices)
  <runtime-debugging>$(runtime-debugging-choices)
  <optimization>$(optimization-choices)
  <profiling>$(profiling-choices)
  <inlining>$(inlining-choices)
  <threading>$(threading-choices)
  <rtti>$(rtti-choices)
  <exception-handling>$(exception-handling-choices)

  <asynch-exceptions>$(asynch-exceptions-choices)

  <extern-c-nothrow>$(extern-c-nothrow-choices)

  <debug-symbols>$(debug-symbols-choices)

  <strip>$(strip-choices)
  <define>$(define-choices)
  <undef>$(undef-choices)
  <include>$(include-choices)
  <warnings>$(warnings-choices)
  <warnings-as-errors>$(warnings-as-errors-choices)

  ;

project
  : default-build
    $(options)
  ;

# targets to build
compile a_c.c ;
link main_c.c ;
lib liba_c : a_c.c a_c.h ;
link main_a_c.c liba_c ;
link stdlib_io_c.c ;
link stdlib_c.c ;
run hello_c.c ;

compile a_cpp.cpp ;
link main_cpp.cpp ;
lib liba_cpp : a_cpp.cpp a_cpp.hpp ;
link main_a_cpp.cpp liba_cpp ;
link stdlib_io_cpp.cpp ;
link stdlib_cpp.cpp ;
run hello_cpp.cpp ;
