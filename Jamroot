import os ;
import testing ;
import regex ;

# generate a list of toolsets to test
local toolset-choices = ;

# Default toolsets
if [ os.name ] = NT
{
  toolset-choices += msvc ;
}
else if [ os.name ] = CYGWIN
{
  toolset-choices += gcc ;
}
else if [ os.name ] = LINUX
{
  toolset-choices += gcc ;
}
else if [ os.name ] = MACOSX
{
  toolset-choices += darwin ;
}

echo "building for the following toolsets:" ;
for local t in $(toolset-choices)
{
  echo "   * $(t)" ;
}

# NOTE: comment out lines below to disable features
#variant-choices = debug release profile ;
link-choices = shared static ;
#runtime-link-choices = shared static ;
#runtime-debugging-choices = on off ;
optimization-choices = off speed space ;
profiling-choices = off on ;
inlining-choices = off on full ;
threading-choices = single multi ;
rtti-choices = off on ;
exception-handling-choices = off on ;

#asynch-exceptions-choices = off on ;

#extern-c-nothrow-choices = off on ;

debug-symbols-choices = on off ;

strip-choices = off on ;
define-choices = DEFINE0 DEFINE1 ;
undef-choices = UNDEF0 UNDEF1 ;
include-choices = include0 include1 ;
warnings-choices = off on ;
warnings-as-errors-choices = off on ;

options =
  <toolset>$(toolset-choices)
  <variant>$(variant-choices)
  <link>$(link-choices)
  <runtime-link>$(runtime-link-choices)
  <runtime-debugging>$(runtime-debugging-choices)
  <optimization>$(optimization-choices)
  <profiling>$(profiling-choices)
  <inlining>$(inlining-choices)
  <threading>$(threading-choices)
  <rtti>$(rtti-choices)
  <exception-handling>$(exception-handling-choices)

  <asynch-exceptions>$(asynch-exceptions-choices)

  <extern-c-nothrow>$(extern-c-nothrow-choices)

  <debug-symbols>$(debug-symbols-choices)

  <strip>$(strip-choices)
  <define>$(define-choices)
  <undef>$(undef-choices)
  <include>$(include-choices)
  <warnings>$(warnings-choices)
  <warnings-as-errors>$(warnings-as-errors-choices)

  ;

bundles = ;
for local o in $(options)
{
  local o-name = [ regex.replace $(o) "[<>]" "-" ] ;
  local b = bundle$(o-name) ;

  bundles += $(b) ;

  explicit $(b) ;
  alias $(b)
    : # sources

      a_c
      liba_c

      main_c
      main_a_c
      stdlib_io_c
      stdlib_c

      a_cpp
      liba_cpp

      main_cpp
      main_a_cpp
      stdlib_io_cpp
      stdlib_cpp

    : # requirements

      $(o)

    ;
}

alias all : $(bundles) ;

project
  : default-build
    $(options)
  ;

# targets to build
explicit a_c ;
compile a_c.c ;
explicit main_c ;
link main_c.c ;
explicit liba_c ;
lib liba_c : a_c.c a_c.h ;
explicit main_a_c ;
link main_a_c.c liba_c ;
explicit stdlib_io_c ;
link stdlib_io_c.c ;
explicit stdlib_c ;
link stdlib_c.c ;
explicit hello_c ;
run hello_c.c ;

explicit a_cpp ;
compile a_cpp.cpp ;
explicit main_cpp ;
link main_cpp.cpp ;
explicit liba_cpp ;
lib liba_cpp : a_cpp.cpp a_cpp.hpp ;
explicit main_a_cpp ;
link main_a_cpp.cpp liba_cpp ;
explicit stdlib_io_cpp ;
link stdlib_io_cpp.cpp ;
explicit stdlib_cpp ;
link stdlib_cpp.cpp ;
explicit hello_cpp ;
run hello_cpp.cpp ;
